
(* let projects = *)
(*   let open Cohttp in *)
(*   let open Cohttp_lwt_unix in *)
(*   let open Lwt.Infix in *)
(*   let headers = *)
(*     Header.add_list *)
(*       (Header.init ()) *)
(*       [ "X-AUTH-USER", kimai_api_user *)
(*       ; "X-AUTH-TOKEN", kimai_api_pwd *)
(*       ; "accept", "application/json" *)
(*       ] *)
(*   in *)
(*   let url = Uri.of_string (Printf.sprintf "%s/projects" kimai_api_url) in *)
(*   let module D = Decoder.Yojson.Safe in *)
(*   Client.get ~headers url *)
(*   >>= fun (_, body) -> *)
(*   body *)
(*   |> Cohttp_lwt.Body.to_string *)
(*   >|= fun body -> *)
(*   let json_body = Yojson.Safe.from_string body in *)
(*   let project_decoder = *)
(*     let* id = D.field "id" D.int in *)
(*     let* name = D.field "name" D.string in *)
(*     D.return { id; name } *)
(*   in *)
(*   match D.list project_decoder json_body with *)
(*   | Error err -> Error err *)
(*   | Ok projects -> *)
(*     projects *)
(*     |> List.fold_left (fun m { id; name } -> IM.add id { id; name } m) IM.empty *)
(*     |> Result.ok *)
(* ;; *)

(* let time_entries = *)
(*   let open Cohttp in *)
(*   let open Cohttp_lwt_unix in *)
(*   let open Lwt.Infix in *)
(*   let headers = *)
(*     Header.add_list *)
(*       (Header.init ()) *)
(*       [ "X-AUTH-USER", kimai_api_user *)
(*       ; "X-AUTH-TOKEN", kimai_api_pwd *)
(*       ; "accept", "application/json" *)
(*       ] *)
(*   in *)
(*   let url = Uri.of_string (Printf.sprintf "%s/timesheets" kimai_api_url) in *)
(*   let module D = Decoder.Yojson.Safe in *)
(*   Client.get ~headers url *)
(*   >>= fun (_resp, body) -> *)
(*   body *)
(*   |> Cohttp_lwt.Body.to_string *)
(*   >|= fun body -> *)
(*   let json_body = Yojson.Safe.from_string body in *)
(*   match timesheet_decoder json_body with *)
(*   | Error err -> Error err *)
(*   | Ok timesheet -> Result.ok timesheet *)
(* ;; *)

(* let time_entries_by_projects = *)
(*   let ( >>= ) = Lwt.bind in *)
(*   projects *)
(*   >>= function *)
(*   | Error err -> Lwt.return_error err *)
(*   | Ok project_map -> *)
(*     time_entries *)
(*     >>= (function *)
(*      | Error err -> Lwt.return_error err *)
(*      | Ok time_entries -> *)
(*        time_entries_by_project time_entries project_map *)
(*        |> SM.map overall_duration_sec *)
(*        |> Lwt.return_ok) *)
(* ;; *)

(* let main () = *)
(*   let res = Lwt_main.run time_entries_by_projects in *)
(*   match res with *)
(*   | Ok ps_to_ts -> *)
(*     let overall_duration = *)
(*       SM.bindings ps_to_ts |> List.map snd |> List.fold_left ( + ) 0 *)
(*     in *)
(*     let overall_hours = float_of_int overall_duration /. 60. /. 60. in *)
(*     Printf.printf "Overall hours: %f\n" overall_hours; *)
(*     let percentage_per_project = *)

(*       SM.map *)
(*         (fun duration -> *)
(*           let duration_hours = float_of_int duration /. 60. /. 60. in *)
(*           let percentage = duration_hours /. overall_hours *. 100.0 in *)
(*           duration_hours, percentage) *)
(*         ps_to_ts *)
(*     in *)
(*     let floor_int f = Float.floor f |> int_of_float in *)
(*     print_endline "\"Project\",\"Hour\",\"Percent\""; *)
(*     percentage_per_project *)
(*     |> SM.bindings *)
(*     |> List.iter (fun (project_name, (hours, percentage)) -> *)
(*       Printf.printf *)
(*         "%s,%i,%i\n" *)
(*         project_name *)
(*         (floor_int hours) *)
(*         (floor_int percentage)); *)
(*     Printf.printf *)
(*       "Percentage (control) %f\n" *)
(*       (SM.bindings percentage_per_project *)
(*        |> List.map (fun x -> snd @@ snd x) *)
(*        |> List.fold_left ( +. ) 0.) *)
(*   | Error err -> print_endline @@ D.Error.show err *)
(* ;; *)
